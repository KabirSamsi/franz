/*  For now, just AST representations of what `franz-programs/<song>.fz`
should look like after parsing and full AST simplification. */

use crate::{
    ast,
    ast::{AExp::*, Accidental::*, BaseNoteLen::*, BasePitch::*}
};

/// Generates a [`crate::ast::NoteComp`] through a comma-separated list of
/// `[crate::ast::Note]`s.
macro_rules! notes {
    ($(($p1:expr, $p2:expr)),* $(,)?) => {
        $crate::ast::NoteComp::Phrase(vec![
            $(
                ($p1, $p2)
            ),*
        ])
    };
}

pub fn innocent() -> ast::NoteComp {
    notes![
        ((C, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(1))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(1))),
        ((B, Flat, Int(3)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(3)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((A, Flat, Int(3)), (Qtr, Int(1))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Flat, Int(3)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(3)), (Half, Int(1))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(1))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Half, Int(1))),
        ((C, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(1))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(1))),
        ((B, Flat, Int(3)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(3)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((A, Flat, Int(3)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(1))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Half, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Natural, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Half, Int(1))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(1))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Half, Int(1))),
        ((B, Flat, Int(3)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(1))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Half, Int(0))),
        ((C, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(1))),
        ((B, Flat, Int(3)), (Eighth, Int(0))),
        ((B, Flat, Int(3)), (Half, Int(0))),
        ((A, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Whole, Int(0))),
        ((C, Natural, Int(5)), (Half, Int(0))),
        ((B, Flat, Int(4)), (Half, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Half, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(1))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Whole, Int(0))),
        ((C, Natural, Int(5)), (Half, Int(0))),
        ((B, Flat, Int(4)), (Half, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Half, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(1))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Whole, Int(0))),
        ((C, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(1))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(1))),
        ((B, Flat, Int(3)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(3)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((A, Flat, Int(3)), (Qtr, Int(1))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Flat, Int(3)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(3)), (Half, Int(1))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(1))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Half, Int(1))),
        ((C, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(1))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(1))),
        ((B, Flat, Int(3)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(3)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((A, Flat, Int(3)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(1))),
        ((E, Flat, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((E, Flat, Int(4)), (Half, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Natural, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Half, Int(1)))
    ]
}

pub fn anthem() -> ast::NoteComp {
    notes![
        ((F, Natural, Int(4)), (Eighth, Int(1))),
        ((D, Natural, Int(4)), (Sixteenth, Int(0))),
        ((B, Flat, Int(3)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Half, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(1))),
        ((C, Natural, Int(5)), (Sixteenth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Half, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(1))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Half, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(1))),
        ((A, Natural, Int(4)), (Sixteenth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(3)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(1))),
        ((D, Natural, Int(4)), (Sixteenth, Int(0))),
        ((B, Flat, Int(3)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Half, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(1))),
        ((C, Natural, Int(5)), (Sixteenth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Half, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(1))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Half, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(1))),
        ((A, Natural, Int(4)), (Sixteenth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(3)), (Qtr, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(1))),
        ((D, Natural, Int(5)), (Sixteenth, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(0))),
        ((E, Flat, Int(5)), (Qtr, Int(0))),
        ((F, Natural, Int(5)), (Qtr, Int(0))),
        ((F, Natural, Int(5)), (Half, Int(0))),
        ((E, Flat, Int(5)), (Eighth, Int(1))),
        ((D, Natural, Int(5)), (Sixteenth, Int(0))),
        ((C, Natural, Int(5)), (Qtr, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(0))),
        ((E, Flat, Int(5)), (Qtr, Int(0))),
        ((E, Flat, Int(5)), (Half, Int(0))),
        ((E, Flat, Int(5)), (Qtr, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(1))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Half, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(1))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Half, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((C, Natural, Int(5)), (Qtr, Int(0))),
        ((E, Flat, Int(5)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(1))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((E, Flat, Int(5)), (Eighth, Int(0))),
        ((F, Natural, Int(5)), (Half, Int(0))),
        ((B, Flat, Int(4)), (Eighth, Int(0))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(1))),
        ((E, Flat, Int(5)), (Eighth, Int(0))),
        ((C, Natural, Int(5)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Whole, Int(0))),
    ]
}

pub fn apprasionata() -> ast::NoteComp {
    notes![
        ((C, Natural, Int(3)), (Qtr, Int(0))),
        ((F, Natural, Int(3)), (Qtr, Int(0))),
        ((A, Flat, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((A, Flat, Int(4)), (Qtr, Int(1))),
        ((G, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Sixteenth, Int(0))),
        ((E, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Half, Int(0))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Natural, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(1))),
        ((A, Flat, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Half, Int(0))),
        ((A, Flat, Int(4)), (Qtr, Int(1))),
        ((G, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Sixteenth, Int(0))),
        ((E, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Half, Int(0))),
        ((B, Flat, Int(4)), (Qtr, Int(1))),
        ((A, Flat, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Half, Int(0))),
        ((C, Natural, Int(5)), (Half, Int(0))),
        ((B, Flat, Int(4)), (Eighth, Int(0))),
        ((A, Flat, Int(4)), (Eighth, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Eighth, Int(1))),
        ((E, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(1))),
        ((E, Natural, Int(4)), (Half, Int(0))),
    ]
}

pub fn allstar() -> ast::NoteComp {
    notes![
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Qtr, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(1))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Qtr, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(1))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(1))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((E, Natural, Int(3)), (Eighth, Int(0))),
        ((E, Natural, Int(3)), (Half, Int(1))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Eighth, Int(1))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((C, Natural, Int(4)), (Qtr, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(1))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((B, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Qtr, Int(0))),
        ((G, Natural, Int(3)), (Eighth, Int(1))),
        ((G, Natural, Int(3)), (Eighth, Int(0))),
        ((A, Natural, Int(3)), (Qtr, Int(0))),
        ((E, Natural, Int(3)), (Qtr, Int(2))),
    ]
}

pub fn cantina() -> ast::NoteComp {
    notes![
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Sixteenth, Int(0))),
        ((G, Sharp, Int(4)), (Sixteenth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((G, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Sharp, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Qtr, Int(0))),
        ((C, Natural, Int(5)), (Sixteenth, Int(0))),
        ((B, Natural, Int(4)), (Sixteenth, Int(0))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Sixteenth, Int(0))),
        ((A, Natural, Int(4)), (Sixteenth, Int(0))),
        ((B, Flat, Int(4)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Natural, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Sixteenth, Int(0))),
        ((G, Sharp, Int(4)), (Sixteenth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((G, Natural, Int(4)), (Sixteenth, Int(0))),
        ((F, Sharp, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Eighth, Int(0))),
        ((F, Natural, Int(4)), (Qtr, Int(0))),
        ((D, Natural, Int(4)), (Qtr, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Eighth, Int(0))),
        ((D, Natural, Int(5)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Qtr, Int(0))),
        ((C, Natural, Int(5)), (Sixteenth, Int(0))),
        ((B, Natural, Int(4)), (Sixteenth, Int(0))),
        ((C, Natural, Int(5)), (Eighth, Int(0))),
        ((B, Flat, Int(4)), (Sixteenth, Int(0))),
        ((A, Natural, Int(4)), (Sixteenth, Int(0))),
        ((B, Flat, Int(4)), (Eighth, Int(0))),
        ((A, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Natural, Int(4)), (Qtr, Int(0)))
    ]
}

pub fn darthvader() -> ast::NoteComp {
    notes![
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(1))),
        ((B, Flat, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(1))),
        ((B, Flat, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Half, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(0))),
        ((D, Natural, Int(5)), (Qtr, Int(0))),
        ((E, Flat, Int(5)), (Eighth, Int(1))),
        ((B, Flat, Int(4)), (Sixteenth, Int(0))),
        ((F, Sharp, Int(4)), (Qtr, Int(0))),
        ((E, Flat, Int(4)), (Eighth, Int(1))),
        ((B, Flat, Int(4)), (Sixteenth, Int(0))),
        ((G, Natural, Int(4)), (Half, Int(0))),
    ]
}
