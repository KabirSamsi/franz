use std::str::*;
use crate::ast::{KeySigPitch, NoteLen, BasePitch, RhythmComp, PitchComp, Accidental, BaseNoteLen, AExp, BExp, Tempo, Param};

grammar;

pub PitchComp : PitchComp = {
    #[precedence(level="3")]
    "{" <pitches : Semicolon<PitchComp>> "}" => PitchComp::PitchCompSeq(pitches),
    "(" <seq: PitchComp> ")" => seq,

    #[precedence(level="2")]  #[assoc(side="left")]
    <c1: PitchComp> r"\}[\s]*\+\[\s]*\{" <c2 : PitchComp> => PitchComp::Plus(Box::new(c1), Box::new(c2)),

    #[precedence(level="1")]  #[assoc(side="left")]
    <n: AExp> r"\*[\s]*" <comp: PitchComp> => PitchComp::Times(n, Box::new(comp)),

    #[precedence(level="0")]
    <note:NoteName> <n:AExp> => PitchComp::Pitch((note, Accidental::Blank, n)),
    <note:NoteName> <n:AExp> "_" <acc:Accidental> => PitchComp::Pitch((note, acc, n))
};

pub RhythmComp : RhythmComp = {
    #[precedence(level="6")]
    "{" <rhythms : Semicolon<RhythmComp>> "}" => RhythmComp::RhythmSequence(rhythms),
    "(" <seq: RhythmComp> ")" => seq,

    #[precedence(level="5")]  #[assoc(side="left")]
    <c1: RhythmComp> r"\}[\s]*\+\[\s]*\{" <c2 : RhythmComp> => RhythmComp::Plus(Box::new(c1), Box::new(c2)),

    #[precedence(level="4")]  #[assoc(side="left")]
    <n: AExp> r"\*[\s]*" <comp: RhythmComp> => RhythmComp::Times(n, Box::new(comp)),
    
    #[precedence(level="3")]
    <b: BExp> "?" <c: RhythmComp> => RhythmComp::Ternary(b, Box::new(c), Box::new(RhythmComp::RhythmSequence(vec![]))),
    
    #[precedence(level="2")]
    <b: BExp> "?" <c1: RhythmComp> ":" <c2: RhythmComp> => RhythmComp::Ternary(b, Box::new(c1), Box::new(c2)),

    #[precedence(level="1")]
    <b:BaseNoteLen> <dots:r"[.]*"> => RhythmComp::Beat((b, ((String::from(dots).chars().count())).try_into().unwrap())),

    #[precedence(level="0")]
    <b: BaseNoteLen> => RhythmComp::Beat((b, 0))
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Param : Param = {
    "key" "=" "{" <pitches: Comma<KeySigPitch>> "};" => Param::KeySig(pitches),
    "meter" "=" <n1:AExp> "/" <n2:AExp> ";" => Param::TimeSig((n1, n2)),
    "tempo" "=" <tempo:Tempo> ";" => Param::Tempo(tempo)
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub KeySigPitch: KeySigPitch = {
    <note: NoteName> "_" <acc: Accidental> => (note, acc)
};

pub NoteLen: NoteLen = {
    #[precedence(level="1")]
    <b:BaseNoteLen> <dots:r"[.]*"> => (b, ((String::from(dots).chars().count())).try_into().unwrap()),

    #[precedence(level="0")]
    <b:BaseNoteLen> => (b, 0)
};

pub BExp: BExp = {
    #[precedence(level="0")]
    "true" => BExp::True,
    "false" => BExp::False,

    #[precedence(level="1")]
    "!" <e:BExp> => BExp::Not(Box::new(e)),

    #[precedence(level="2")] #[assoc(side="left")]
    <e1:BExp> "||" <e2:BExp> => BExp::Or(Box::new(e1), Box::new(e2)),

    #[precedence(level="3")] #[assoc(side="left")]
    <e1:BExp> "&&" <e2:BExp> => BExp::And(Box::new(e1), Box::new(e2)),

    #[precedence(level="4")] #[assoc(side="right")]
    "let" <handle:r"[a-z]+[a-zA-Z]*"> "=" <e:BExp> => BExp::Assign((*handle).to_string(), Box::new(e))
};

pub AExp: AExp = {
    #[precedence(level="0")]
    r"[0-9]+" => AExp::Int(i32::from_str(<>).unwrap()),

    #[precedence(level="1")] #[assoc(side="left")] 
    <e1:AExp> "+" <e2:AExp> => AExp::Plus(Box::new(e1), Box::new(e2)),

    #[precedence(level="2")] #[assoc(side="left")]
    <e1:AExp> "*" <e2:AExp> => AExp::Times(Box::new(e1), Box::new(e2)),

    #[precedence(level="3")] #[assoc(side="right")]
    "let" <handle:r"[a-z]+[a-zA-Z]*"> "=" <e:AExp> => AExp::Assign((*handle).to_string(), Box::new(e))
};

pub NoteName: BasePitch = {
    "c" => BasePitch::C,
    "d" => BasePitch::D,
    "e" => BasePitch::E,
    "f" => BasePitch::F,
    "g" => BasePitch::G,
    "a" => BasePitch::A,
    "b" => BasePitch::B,
    "rst" => BasePitch::Rest,
};

pub BaseNoteLen: BaseNoteLen = {
    "ts" => BaseNoteLen::Ts,
    "sx" => BaseNoteLen::Sixteenth,
    "et" => BaseNoteLen::Eighth,
    "qt" => BaseNoteLen::Qtr,
    "hf" => BaseNoteLen::Half,
    "wh" => BaseNoteLen::Whole
};

pub Accidental: Accidental = {
    "flt" => Accidental::Flat,
    "shp" => Accidental::Sharp,
    "ntl" => Accidental::Natural,
};

pub Tempo: Tempo = {
    "Presto" => Tempo::Presto,
    "Allegro" => Tempo::Allegro,
    "Andante" => Tempo::Andante,
    "Adagio" => Tempo::Adagio,
    "Lento" => Tempo::Lento
}

