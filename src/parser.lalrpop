use std::str::*;
use crate::ast::{Pitch, KeySigPitch, NoteLen, Note, BasePitch, Accidental, BaseNoteLen, AExp, BExp, Tempo, Param};

grammar;

// pub RhythComp : RhythComp = {
//     #[precedence(level="0")]
//     <beats: Semicolon<NoteLen>> => RhythComp::BeatSequence(beats),

//     #[precedence(level="1")] #[assoc(side="left")]
//     <n:AExp> "*" "(" <comp:RhythComp> ")" => RhythComp::Times(n, comp),

//     #[precedence(level="2")] #[assoc(side="left")]
//     <comp1:RhythComp> "+" <comp2:RhythComp> => RhythComp::Plus(comp1, comp2),

//     #[precedence(level="3")] #[assoc(side="left")]
//     <b:BExp> "?" <comp1:RhythComp> ":" <comp2:RhythComp> => RhythComp::Ternary(b, comp1, comp2),

//     #[precedence(level="4")] #[assoc(side="right")]
//     "motif" <handle:r"[a-z]+[a-zA-Z]*"> "{" <comp:RhythComp> "};" => RhythComp::Assign(handle, comp),
// };

pub Param : Param = {
    "key" "=" "{" <pitches: Comma<KeySigPitch>> "};" => Param::KeySig(pitches),
    "meter" "=" <n1:AExp> "/" <n2:AExp> ";" => Param::TimeSig((n1, n2)),
    "tempo" "=" <tempo:Tempo> ";" => Param::Tempo(tempo)
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> "; ")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Note : Note = {
    "(" <note: Pitch> "," <len: NoteLen> ")" => (note, len)
};

pub Pitch: Pitch = {
    <note:NoteName> <n:AExp> => (note, Accidental::Blank, n),
    <note:NoteName> <n:AExp> "_" <acc:Accidental> => (note, acc, n)
};

pub KeySigPitch: KeySigPitch = {
    <note:NoteName> "_" <acc:Accidental> => (note, acc)
};

pub NoteLen: NoteLen = {
    #[precedence(level="1")]
    <b:Beat> <dots:r"[.]*"> => (b, ((String::from(dots).chars().count() - 1)).try_into().unwrap()),

    #[precedence(level="0")]
    <b: Beat> => (b, 0)
};

pub BExp: BExp = {
    #[precedence(level="0")]
    "true" => BExp::True,
    "false" => BExp::False,

    #[precedence(level="1")]
    "!" <e:BExp> => BExp::Not(Box::new(e)),

    #[precedence(level="2")] #[assoc(side="left")]
    <e1:BExp> "||" <e2:BExp> => BExp::Or(Box::new(e1), Box::new(e2)),

    #[precedence(level="3")] #[assoc(side="left")]
    <e1:BExp> "&&" <e2:BExp> => BExp::And(Box::new(e1), Box::new(e2)),

    #[precedence(level="4")] #[assoc(side="right")]
    "let" <handle:r"[a-z]+[a-zA-Z]*"> "=" <e:BExp> => BExp::Assign((*handle).to_string(), Box::new(e))
};

pub AExp: AExp = {
    #[precedence(level="0")]
    r"[0-9]+" => AExp::Int(i32::from_str(<>).unwrap()),

    #[precedence(level="1")] #[assoc(side="left")] 
    <e1:AExp> "+" <e2:AExp> => AExp::Plus(Box::new(e1), Box::new(e2)),

    #[precedence(level="2")] #[assoc(side="left")]
    <e1:AExp> "*" <e2:AExp> => AExp::Times(Box::new(e1), Box::new(e2)),

    #[precedence(level="3")] #[assoc(side="right")]
    "let" <handle:r"[a-z]+[a-zA-Z]*"> "=" <e:AExp> => AExp::Assign((*handle).to_string(), Box::new(e))
};

pub NoteName: BasePitch = {
    "c" => BasePitch::C,
    "d" => BasePitch::D,
    "e" => BasePitch::E,
    "f" => BasePitch::F,
    "g" => BasePitch::G,
    "a" => BasePitch::A,
    "b" => BasePitch::B,
    "rst" => BasePitch::Rest,
};

pub Beat: BaseNoteLen = {
    "ts" => BaseNoteLen::Ts,
    "sx" => BaseNoteLen::Sixteenth,
    "et" => BaseNoteLen::Eighth,
    "qt" => BaseNoteLen::Qtr,
    "hf" => BaseNoteLen::Half,
    "wh" => BaseNoteLen::Whole
};

pub Accidental: Accidental = {
    "flt" => Accidental::Flat,
    "shp" => Accidental::Sharp,
    "ntl" => Accidental::Natural,
};

pub Tempo: Tempo = {
    "Presto" => Tempo::Presto,
    "Allegro" => Tempo::Allegro,
    "Andante" => Tempo::Andante,
    "Adagio" => Tempo::Adagio,
    "Lento" => Tempo::Lento
}

