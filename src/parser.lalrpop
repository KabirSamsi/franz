use std::str::*;
use crate::ast::{Pitch, KeySigPitch, NoteLen, Note};
use crate::ast::BasePitch;
use crate::ast::Accidental;
use crate::ast::BaseNoteLen;

grammar;

pub Note : Note = {
    "(" <note: Pitch> ", " <len: NoteLen> ")" => (note, len)
};

pub Pitch: Pitch = {
    <note:NoteName> <n:Num> => (note, Accidental::Natural, n),
    <note:NoteName> <n:Num> "_" <acc:Accidental> => (note, acc, n)
};

pub KeySigPitch: KeySigPitch = {
    <note:NoteName> "_" <acc:Accidental> => (note, acc)
};

pub NoteName: BasePitch = {
    "c" => BasePitch::C,
    "d" => BasePitch::D,
    "e" => BasePitch::E,
    "f" => BasePitch::F,
    "g" => BasePitch::G,
    "a" => BasePitch::A,
    "b" => BasePitch::B,
};

pub NoteLen: NoteLen = {
    <b:Beat> <dots:r"[.]*"> => (b, String::from(dots).chars().count().try_into().unwrap())
};

pub Beat: BaseNoteLen = {
    "t" => BaseNoteLen::Ts,
    "s" => BaseNoteLen::Sixteenth,
    "et" => BaseNoteLen::Eighth,
    "q" => BaseNoteLen::Qtr,
    "h" => BaseNoteLen::Half,
    "w" => BaseNoteLen::Whole
};

pub Accidental: Accidental = {
    "flt" => Accidental::Flat,
    "shp" => Accidental::Sharp,
    "ntl" => Accidental::Natural,
};

pub Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};