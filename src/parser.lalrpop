use std::str::*;
use crate::ast::{Accidental, AExp, BaseNoteLen, BasePitch, KeySigPitch, NoteLen, Param, Pitch, Tempo, UntypedExpr};

grammar;

pub Control : UntypedExpr = {
    <c: ControlDecl> "=" "{" <u: UseDecl> "{" <params: Params> "}" <s: Semicolons> <flow: CompSeparator<UntypedExpr>> "}" => UntypedExpr::Control(params, flow)
};

pub UntypedExpr : UntypedExpr = {
    #[precedence(level="0")]
    UntypedExprTerminal,

    #[precedence(level="1")] #[assoc(side="left")]
    "!" <e:UntypedExpr> => UntypedExpr::Not(Box::new(e)),

    #[precedence(level="2")] #[assoc(side="left")]
    <r: UntypedExpr> <lb1: "["> <lb2: "["> <params: Comma<UntypedExpr>> <rb1: "],"> <p: UntypedExpr> <rb2: "]"> => UntypedExpr::Apply(Box::new(r), params, Box::new(p)),
    <r: UntypedExpr> <lb1: "["> <p: UntypedExpr> <rb2: "]"> => UntypedExpr::Apply(Box::new(r), vec![], Box::new(p)),

    #[precedence(level="3")] #[assoc(side="left")]
    <e1: UntypedExpr> "*" <e2: UntypedExpr> => UntypedExpr::Times(Box::new(e1), Box::new(e2)),
    <e1:UntypedExpr> "&&" <e2:UntypedExpr> => UntypedExpr::And(Box::new(e1), Box::new(e2)),

    #[precedence(level="4")] #[assoc(side="right")]
    <b:UntypedExpr> "?" <r1:UntypedExpr> ":" <r2:UntypedExpr> => UntypedExpr::Ternary(Box::new(b), Box::new(r1), Box::new(r2)),

    #[precedence(level="5")] #[assoc(side="left")]
    <e1:UntypedExpr> "||" <e2:UntypedExpr> => UntypedExpr::Or(Box::new(e1), Box::new(e2)),
    <e1:UntypedExpr> "+" <e2:UntypedExpr> => UntypedExpr::Plus(Box::new(e1), Box::new(e2)),
    <r1:UntypedExpr> ";" <r2:UntypedExpr> => UntypedExpr::Plus(Box::new(r1), Box::new(r2)),

    #[precedence(level="6")] #[assoc(side="right")]
    <m: MotifDecl> <name: Handle> "[" <params: Comma<Handle>> "]" "=" <comp: UntypedExpr> => UntypedExpr::Motif(name, params, Box::new(comp)),
    <p: PitchesDecl> <name: Handle> "=" <comp: UntypedExpr> => UntypedExpr::Pitches(name, Box::new(comp)),
    <p: PhraseDecl> <name: Handle> "=" <comp: UntypedExpr> => UntypedExpr::Phrase(name, Box::new(comp)),

    #[precedence(level="7")] #[assoc(side="right")]
    <r: ReturnDecl> <comp: UntypedExpr> => UntypedExpr::Return(Box::new(comp))
};

UntypedExprTerminal : UntypedExpr = {
    "(" <p:Pitch> "," <b: NoteLen> ")" => UntypedExpr::Note((p, b)),
    <p: Pitch> => UntypedExpr::Pitch(p),
    <v: Handle> => UntypedExpr::Var(v),
    <b: NoteLen> => UntypedExpr::Beat(b),
    <t: True> => UntypedExpr::Bool(true),
    <f: False> => UntypedExpr::Bool(false),
    <i: Int> => UntypedExpr::Int(i),
    "(" <UntypedExpr> ")",
    "{" <UntypedExpr> "}"
};

Handle: String = {
    r"[A-Z]+[a-zA-Z0-9]*" => (*<>).to_string()
};

pub Params: Vec<Param> = {
    <p: Semicolon<Param>> => p
};

Param : Param = {
    <k: KeyDecl> "=" "{" <pitches: Comma<KeySigPitch>> "}" => Param::KeySig(pitches),
    <m: MeterDecl> "=" <n1:Int> "/" <n2:Int> => Param::TimeSig((AExp::Int(n1), AExp::Int(n2))),
    <t: TempoDecl> "=" <tempo:Tempo> => Param::Tempo(tempo)
};

CompSeparator<T>: Vec<T> = {
    <v:(<T> Semicolons)*> => v
};

Semicolon<T>: Vec<T> = {
    <v:(<T> ";")*> => v
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Pitch : Pitch = {
    <note:NoteName> <n:Int> => (note, Accidental::Blank, AExp::Int(n)),
    <note:NoteName> <n:Int> "_" <acc:Accidental> => (note, acc, AExp::Int(n))
}

Int: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

KeySigPitch: KeySigPitch = {
    <note: NoteName> "_" <acc: Accidental> => (note, acc)
};

NoteLen: NoteLen = {
    #[precedence(level="1")]
    <b:BaseNoteLen> <dots:r"[.]*"> => (b, (String::from(dots).chars().count()).try_into().unwrap()),

    #[precedence(level="0")]
    <b:BaseNoteLen> => (b, 0)
};

NoteName: BasePitch = {
    "c" => BasePitch::C,
    "d" => BasePitch::D,
    "e" => BasePitch::E,
    "f" => BasePitch::F,
    "g" => BasePitch::G,
    "a" => BasePitch::A,
    "b" => BasePitch::B,
    "rst" => BasePitch::Rest
};

BaseNoteLen: BaseNoteLen = {
    "ts" => BaseNoteLen::Ts,
    "sx" => BaseNoteLen::Sixteenth,
    "et" => BaseNoteLen::Eighth,
    "qt" => BaseNoteLen::Qtr,
    "hf" => BaseNoteLen::Half,
    "wh" => BaseNoteLen::Whole
};

Accidental: Accidental = {
    "flt" => Accidental::Flat,
    "shp" => Accidental::Sharp,
    "ntl" => Accidental::Natural
};

pub Tempo: Tempo = {
    "Presto" => Tempo::Presto,
    "Allegro" => Tempo::Allegro,
    "Andante" => Tempo::Andante,
    "Adagio" => Tempo::Adagio,
    "Lento" => Tempo::Lento
};

ControlDecl : String = {
    "control" => "control".to_string()
};

UseDecl : String = {
    "use" => "use".to_string()
};

ReturnDecl : String = {
    "return" => "return".to_string()
};

MotifDecl : String = {
    "motif" => "motif".to_string()
};

PitchesDecl : String = {
    "pitches" => "pitches".to_string()
};

PhraseDecl : String = {
    "phrase" => "phrase".to_string()
};

KeyDecl : String = {
    "key" => "key".to_string()
};

MeterDecl : String = {
    "meter" => "meter".to_string()
};

TempoDecl : String = {
    "tempo" => "tempo".to_string()
};

True : bool = {
    "true" => true
};

False: bool = { 
    "false" => false
};

Semicolons: String = {
    ";;" => ";;".to_string()
};